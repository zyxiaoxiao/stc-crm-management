<template>
	<div class="all-height flex-column main-card">
		<el-tabs class="flex-column flex-1 main-card-tabs" v-model="tabPaneName" @tab-change="tabChange">
			<el-tab-pane
				title1="客户解锁申请"
				:label="$t('panelCustomerreleaseapplication')"
				class="main-tab-pane-content all-height flex-column"
				name="0"
			>
				<zTable ref="zTable1" :tableList="tableList1" @workflow-status="workflowStatus">
					<template #tableHeaderLleft="scope">
						<el-button size="small" type="primary" icon="Edit" plain @click="batchEdit">{{ $t("menu_new") }}</el-button>
						<el-button
							size="small"
							type="danger"
							icon="Delete"
							plain
							:disabled="!scope.isSelected"
							@click="batchDelete(scope.selectList)"
							>{{ $t("menu_delete") }}</el-button
						>
						<el-button
							size="small"
							type="success"
							icon="Check"
							plain
							:disabled="!scope.isSelected"
							@click="Submit(scope.selectList)"
							>{{ $t("menu_submit") }}</el-button
						>
					</template>
					<!-- 表格操作 -->
					<template #operation="scope">
						<el-button type="primary" link icon="Edit" @click="editInformation(scope.row)">
							{{ $t("menu_edit") }}
						</el-button>
					</template>
				</zTable>
			</el-tab-pane>
			<el-tab-pane
				title1="客户解锁申请查询"
				:label="$t('panelUnlockrequestquery')"
				class="main-tab-pane-content all-height flex-column"
				name="1"
			>
				<zTable ref="zTable2" :tableList="tableList2" @workflow-status="workflowStatus" @link-detailbg="linkDetailbgQuery">
				</zTable>
			</el-tab-pane>
		</el-tabs>
		<!-- 审核记录 -->
		<div v-dialogStretching>
			<ZDialog v-model="auditList.dialogShow" :title="$t('menu_auditOpinion')" width="95%">
				<audit :auditList="auditList"></audit>
			</ZDialog>
		</div>
		<!-- 新增数据 -->
		<div v-dialogStretching>
			<ZDialog v-model="enterpriselockdetailnewList.dialogShow" width="95%" @close="enterpriselockdetailnewClose">
				<enterpriselockdetailnew :condobj="enterpriselockdetailnewList" />
			</ZDialog>
		</div>
	</div>
</template>

<script setup>
import { ref, reactive, onMounted } from "vue";
import { useI18n } from "vue-i18n";
import qs from "qs";
import http from "@/api/index.js";

import zTable from "/src/components/ZTable/index.vue";
import { ElMessageBox, ElMessage } from "element-plus";
import ZDialog from "/src/components/ZDialog.vue";

import audit from "@/views/audit/index.vue";

import enterpriselockdetailnew from "./enterpriselock_detail_new.vue";

const i18n = useI18n();

const tableColumns1 = [
	{
		type: "selection",
		width: "40"
	},
	{
		title: "状态",
		label: "itemtitlecommondesc11",
		prop: "processflag",
		type: "workflowStatus",
		width: "70"
	},
	{
		title: "id",
		label: "",
		prop: "lockid",
		type: "id",
		width: "60",
		isHide: true
	},
	{
		title: "客户号",
		label: "fieldcolumncustomercode",
		prop: "corpno",
		type: "Input",
		width: "160"
	},
	{
		title: "客户名称",
		label: "panelcolumncustomername",
		prop: "corpdesc",
		type: "Input",
		width: "260"
	},
	{
		title: "AR金额",
		label: "enterpriselockinfoARAmounttitle_hkd",
		prop: "arcount",
		type: "Number",
		width: "160"
	},
	{
		title: "解锁原因",
		label: "enterpriselockinfoUnlockReasontitle",
		prop: "unlockreason",
		type: "Input"
	},
	{
		title: "创建人",
		label: "corpinfopanelcjrtitle",
		prop: "recorderdesc",
		type: "Input",
		width: "160"
	},
	{
		title: "创建时间",
		label: "itemtitlestatusrecordertime",
		prop: "recordtime",
		type: "DateTime",
		width: "160"
	},

	{
		title: "操作",
		label: "itemtitleloginoperation",
		prop: "operation",
		type: "operation",
		fixed: "right"
	},
	{
		title: "corpid",
		label: "",
		prop: "corpid",
		type: "Input",
		width: "160",
		isHide: true
	},
	{
		title: "recordercode",
		label: "",
		prop: "recordercode",
		type: "Input",
		width: "160",
		isHide: true
	}
];

const zTable1 = ref();
//表格对象
const tableList1 = reactive({
	//请求属性设置
	httpAttribute: {
		url: "/crm/enterpriselock/enterpriselock!selectEnterpriselockInfoByCond.action",
		root: "enterpriselockInfos",
		baseParams: { "cond.auditflag": "0" }
	},
	//表格表头
	tableColumns: tableColumns1,
	// 表格数据
	tableData: []
});

const zTable2 = ref();
//表格对象
const tableList2 = reactive({
	//请求属性设置
	httpAttribute: {
		url: "/crm/enterpriselock/enterpriselock!selectEnterpriselockInfoByCondRight.action",
		root: "enterpriselockInfos",
		baseParams: { "cond.auditflag": "0" }
	},
	//表格表头
	tableColumns: [
		{
			type: "selection",
			width: "40"
		},
		{
			title: "状态",
			label: "itemtitlecommondesc11",
			prop: "processflag",
			type: "workflowStatus",
			width: "70"
		},
		{
			title: "id",
			label: "",
			prop: "lockid",
			type: "id",
			width: "60",
			isHide: true
		},
		{
			title: "客户号",
			label: "fieldcolumncustomercode",
			prop: "corpno",
			type: "Input",
			width: "160"
		},
		{
			title: "客户名称",
			label: "panelcolumncustomername",
			prop: "corpdesc",
			type: "Link",
			width: "260"
		},
		{
			title: "AR金额",
			label: "enterpriselockinfoARAmounttitle_hkd",
			prop: "arcount",
			type: "Number",
			width: "160"
		},
		{
			title: "解锁原因",
			label: "enterpriselockinfoUnlockReasontitle",
			prop: "unlockreason",
			type: "Input"
		},
		{
			title: "创建人",
			label: "corpinfopanelcjrtitle",
			prop: "recorderdesc",
			type: "Input",
			width: "160"
		},
		{
			title: "创建时间",
			label: "itemtitlestatusrecordertime",
			prop: "recordtime",
			type: "DateTime",
			width: "160"
		},
		{
			title: "corpid",
			label: "",
			prop: "corpid",
			type: "Input",
			width: "160",
			isHide: true
		},
		{
			title: "recordercode",
			label: "",
			prop: "recordercode",
			type: "Input",
			width: "160",
			isHide: true
		}
	],
	// 表格数据
	tableData: []
});

//审核记录
const auditList = reactive({
	dialogShow: false,
	codeid: "",
	tablename: "MLS_ENTERPRISELOCK",
	columnid: "lockid"
});

//工作流审核历史记录
const workflowStatus = (column, row) => {
	auditList.codeid = row[auditList.columnid];
	auditList.dialogShow = true;
};

//新增 弹出参数
const enterpriselockdetailnewList = reactive({
	dialogShow: false,
	success: false,
	lockid: "",
	readonly: true,
	workflowflag: 1
});

//弹出新增
const batchEdit = () => {
	enterpriselockdetailnewList.dialogShow = true;
	enterpriselockdetailnewList.success = false;
	enterpriselockdetailnewList.lockid = "";
	enterpriselockdetailnewList.readonly = false;
	enterpriselockdetailnewList.workflowflag = 1;
};

// 编辑信息
const editInformation = row => {
	enterpriselockdetailnewList.dialogShow = true;
	enterpriselockdetailnewList.success = false;
	enterpriselockdetailnewList.lockid = row.lockid;
	enterpriselockdetailnewList.readonly = false;
	enterpriselockdetailnewList.workflowflag = 1;
};

//选择数据回调
const enterpriselockdetailnewClose = () => {
	if (enterpriselockdetailnewList.success) {
		zTable1.value.getTableList();
	}
};

//批量删除数据
const batchDelete = rows => {
	ElMessageBox.confirm(i18n.t("Message_Confirmdelete"), i18n.t("reminder"), {
		confirmButtonText: i18n.t("menu_ok"),
		cancelButtonText: i18n.t("menu_cancel"),
		type: "warning",
		draggable: true
	}).then(async () => {
		const res = await http.post(
			"/crm/enterpriselock/enterpriselock!deleteEnterpriselockInfo.action",
			qs.stringify({ jsonString: JSON.stringify({ enterpriselockInfos: rows }) })
		);
		if (res) {
			ElMessage.success(i18n.t("Message_deleteSuccess"));
			zTable1.value.getTableList();
		}
	});
};

//提交
const Submit = async row => {
	//提交前检查此客户是否已经有审核中的解锁申请
	const res = await http.post(
		"/crm/enterpriselock/enterpriselock!checkIsExistEnterpriselockInfo.action",
		qs.stringify({ jsonString: JSON.stringify({ enterpriselockInfos: row }) })
	);
	ElMessageBox.confirm(i18n.t("Message_ConfirmOrNotSubmit"), i18n.t("reminder"), {
		confirmButtonText: i18n.t("menu_ok"),
		cancelButtonText: i18n.t("menu_cancel"),
		type: "warning",
		draggable: true
	}).then(async () => {
		const res = await http.post(
			"/crm/enterpriselock/enterpriselock!submit.action",
			qs.stringify({ jsonString: JSON.stringify({ enterpriselockInfos: row }) })
		);
		if (res) {
			ElMessage.success(i18n.t("Message_OperationSuccess"));
			zTable1.value.getTableList();
		}
	});
};

const linkDetailbgQuery = (column, row) => {
	enterpriselockdetailnewList.dialogShow = true;
	enterpriselockdetailnewList.success = false;
	enterpriselockdetailnewList.lockid = row.lockid;
	enterpriselockdetailnewList.readonly = true;
};

const tabPaneName = ref("0");
const tabChange = TabPaneName => {
	switch (TabPaneName) {
		case "0":
			zTable1.value.getTableList();
			break;
		case "1":
			zTable2.value.getTableList();
			break;
	}
};

//页面初始化渲染完成执行
onMounted(() => {
	zTable1.value.getTableList();
});
</script>
